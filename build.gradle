plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
}

group = 'ru.SimbirSoft'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.seleniumhq.selenium:selenium-java:4.17.0'
    implementation 'com.github.javafaker:javafaker:1.0.2'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Для устранения предупреждений SLF4J
    testImplementation 'org.slf4j:slf4j-simple:2.0.9'

    // Allure с совместимыми версиями
    testImplementation 'io.qameta.allure:allure-junit5:2.24.0'
    testImplementation 'io.qameta.allure:allure-attachments:2.24.0'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = "full"
    }
}

allure {
    version = '2.24.0'
    autoconfigure = true
    useJUnit5 {
        version = '2.24.0'
    }
    // Создаем задачу которая всегда генерирует отчет
    task generateAllureReport(type: Exec) {
        dependsOn 'test'
        commandLine 'allure', 'generate', 'build/allure-results', '-o', 'build/reports/allure-report', '--clean'
        ignoreExitValue = true // Игнорируем код возврата
    }

    task openAllureReport(type: Exec) {
        dependsOn 'generateAllureReport'
        commandLine 'allure', 'open', 'build/reports/allure-report'
    }
}